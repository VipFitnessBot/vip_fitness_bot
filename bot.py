import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ –∑ —Ñ–∞–π–ª—É
with open("token.txt") as f:
    BOT_TOKEN = f.read().strip()

# –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
users = {}

# –ö–æ–Ω—Ñ—ñ–≥ —Ä—ñ–≤–Ω—ñ–≤ –∑–Ω–∏–∂–æ–∫ —ñ –±–æ–Ω—É—Å—ñ–≤
DISCOUNTS = {
    1: "20%",
    2: "25%",
    3: "30%",
    4: "35%",
    5: "40%",
    6: "45%",
}

BONUSES = {
    1: "‚òï –ö–∞–≤–∞",
    2: "‚òï‚òï –î–≤—ñ –∫–∞–≤–∏",
    3: "ü•§ –ü—Ä–æ—Ç–µ—ó–Ω–æ–≤–∏–π –∫–æ–∫—Ç–µ–π–ª—å",
    4: "‚òï + ü•§ –ö–∞–≤–∞ + –ø—Ä–æ—Ç–µ—ó–Ω–æ–≤–∏–π –∫–æ–∫—Ç–µ–π–ª—å",
    5: "‚òï‚òï + ü•§ –î–≤—ñ –∫–∞–≤–∏ + –ø—Ä–æ—Ç–µ—ó–Ω–æ–≤–∏–π –∫–æ–∫—Ç–µ–π–ª—å",
    6: "üéÅ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –Ω–∞–±—ñ—Ä –±–æ–Ω—É—Å—ñ–≤",
}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ä—Ç–æ–≤–µ –º–µ–Ω—é"""
    user_id = update.effective_user.id
    if user_id not in users:
        users[user_id] = {"level": 0, "payments": 0}

    keyboard = [
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏ VIP (100 –≥—Ä–Ω)", callback_data="pay")],
        [InlineKeyboardButton("üìä –ú—ñ–π —Ä—ñ–≤–µ–Ω—å", callback_data="profile")],
        [InlineKeyboardButton("üéÅ –£—Å—ñ –±–æ–Ω—É—Å–∏ —ñ –∑–Ω–∏–∂–∫–∏", callback_data="all_rewards")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üëã –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ —É VIP –∫–ª—É–±!\n\n"
        "–¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É, –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤—ñ–π —Ä—ñ–≤–µ–Ω—å —ñ –±–æ–Ω—É—Å–∏.",
        reply_markup=reply_markup,
    )


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data == "pay":
        await handle_payment(query, user_id)
    elif query.data == "profile":
        await show_profile(query, user_id)
    elif query.data == "all_rewards":
        await show_all_rewards(query)


async def handle_payment(query, user_id):
    """–û–ø–ª–∞—Ç–∞ (–∑–∞—Ä–∞–∑ –∑–∞–≥–ª—É—à–∫–∞)"""
    if user_id not in users:
        users[user_id] = {"level": 0, "payments": 0}

    users[user_id]["payments"] += 1

    # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä—ñ–≤–Ω—è
    payments = users[user_id]["payments"]
    if payments == 1:
        users[user_id]["level"] = 1
    elif payments == 2:
        users[user_id]["level"] = 1
    elif payments == 3:
        users[user_id]["level"] = 2
    elif payments == 4:
        users[user_id]["level"] = 3
    elif payments == 5:
        users[user_id]["level"] = 4
    elif payments == 6:
        users[user_id]["level"] = 5
    elif payments >= 7:
        users[user_id]["level"] = 6

    await query.edit_message_text(
        "‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø—ñ—à–Ω–∞ (–∑–∞—Ä–∞–∑ —Ç–µ—Å—Ç–æ–≤–∏–π —Ä–µ–∂–∏–º WayForPay)\n\n"
        "–í–∞—à —Ä—ñ–≤–µ–Ω—å –æ–Ω–æ–≤–ª–µ–Ω–æ!"
    )


async def show_profile(query, user_id):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å"""
    level = users[user_id]["level"]
    discount = DISCOUNTS.get(level, "0%")
    bonus = BONUSES.get(level, "‚Äî")

    text = (
        f"üë§ –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å\n\n"
        f"üìä –†—ñ–≤–µ–Ω—å: {level}\n"
        f"üí∏ –ó–Ω–∏–∂–∫–∞: {discount}\n"
        f"üéÅ –ë–æ–Ω—É—Å: {bonus}\n\n"
        f"‚ÑπÔ∏è –ë–æ–Ω—É—Å–∏ –º–æ–∂–Ω–∞ –æ–±–º—ñ–Ω—è—Ç–∏ –Ω–∞ —ñ–Ω—à—ñ —Ç–æ–≤–∞—Ä–∏ "
        f"—É —Å—Ö–æ–∂–æ–º—É —Ü—ñ–Ω–æ–≤–æ–º—É –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ."
    )

    await query.edit_message_text(text)


async def show_all_rewards(query):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ —Ä—ñ–≤–Ω—ñ —ñ –Ω–∞–≥–æ—Ä–æ–¥–∏"""
    text = "üìä –£—Å—ñ —Ä—ñ–≤–Ω—ñ VIP –∫–ª—É–±—É:\n\n"
    for lvl in range(1, 7):
        text += (
            f"‚≠ê –†—ñ–≤–µ–Ω—å {lvl}: "
            f"{DISCOUNTS[lvl]} + {BONUSES[lvl]}\n"
        )

    await query.edit_message_text(text)


def main():
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))

    # –ë–µ–∑ asyncio.run(), –∑–∞–ø—É—Å–∫–∞—î–º–æ –Ω–∞–ø—Ä—è–º—É
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()
