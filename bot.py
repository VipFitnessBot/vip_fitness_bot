
import os
import json
import time
import hmac
import hashlib
import threading
from datetime import datetime, timedelta

import requests
from flask import Flask, request, jsonify
import telebot
from telebot import types

# =====================
# Config / Secrets
# =====================

BOT_TOKEN = os.environ.get("BOT_TOKEN")
if not BOT_TOKEN and os.path.exists("token.txt"):
    with open("token.txt", "r", encoding="utf-8") as f:
        BOT_TOKEN = f.read().strip()
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –î–æ–¥–∞–π Railway Variable BOT_TOKEN –∞–±–æ —Ñ–∞–π–ª token.txt.")

# WayForPay
WFP_MERCHANT = os.environ.get("WFP_MERCHANT", "").strip()           # merchantAccount
WFP_SECRET   = os.environ.get("WFP_SECRET", "").strip()             # SecretKey
PUBLIC_URL   = os.environ.get("PUBLIC_URL", "").rstrip("/")         # https://<app>.up.railway.app
BOT_USERNAME = os.environ.get("BOT_USERNAME", "").strip()           # –±–µ–∑ @
WFP_RETURN_URL = os.environ.get("WFP_RETURN_URL", f"https://t.me/{BOT_USERNAME}")

# –í–∏—Ç—è–≥–Ω—É—Ç–∏ –¥–æ–º–µ–Ω –¥–ª—è –ø—ñ–¥–ø–∏—Å—É (merchantDomainName)
if PUBLIC_URL.startswith("http"):
    from urllib.parse import urlparse
    WFP_DOMAIN = urlparse(PUBLIC_URL).netloc
else:
    WFP_DOMAIN = os.environ.get("WFP_DOMAIN", "your-domain.example")

# –°—É–º–∞ –ø—ñ–¥–ø–∏—Å–∫–∏
SUBSCRIPTION_AMOUNT = int(os.environ.get("SUBSCRIPTION_AMOUNT", "100"))  # –≥—Ä–Ω

# =====================
# Data Storage
# =====================

DATA_FILE = "users.json"

def load_db():
    if not os.path.exists(DATA_FILE):
        return {}
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return {}

def save_db():
    tmp = DATA_FILE + ".tmp"
    with open(tmp, "w", encoding="utf-8") as f:
        json.dump(DB, f, ensure_ascii=False, indent=2)
    os.replace(tmp, DATA_FILE)

DB = load_db()

def get_user(uid: int):
    uid = str(uid)
    if uid not in DB:
        DB[uid] = {
            "level": 0,
            "consecutive_payments": 0,
            "last_payment_at": None,
            "next_due_at": None,
            "failed_autopay_days": 0,
            "recToken": None,
            "payments": []  # [{orderRef, amount, status, createdAt}]
        }
        save_db()
    return DB[uid]

# =====================
# VIP Logic
# =====================

def level_from_consecutive(n: int) -> int:
    if n <= 0: return 0
    lvl = (n - 1)//2 + 1
    return min(lvl, 6)  # –¥–æ 45%

def discount_for_level(level: int) -> int:
    return {0:0, 1:20, 2:25, 3:30, 4:35, 5:40, 6:45}.get(level, 45)

BONUSES_BY_LEVEL = {
    0: "‚Äî –ë–æ–Ω—É—Å–∏ –∑‚Äô—è–≤–ª—è—Ç—å—Å—è –∑ —Ä—ñ–≤–Ω—è 2.",
    1: "‚Äî –ü–æ–∫–∏ –±–æ–Ω—É—Å—ñ–≤ –Ω–µ–º–∞—î.",
    2: "‚Äî 1√ó –∫–∞–≤–∞",
    3: "‚Äî 2√ó –∫–∞–≤–∏",
    4: "‚Äî 1√ó –ø—Ä–æ—Ç–µ—ó–Ω–æ–≤–∏–π –∫–æ–∫—Ç–µ–π–ª—å",
    5: "‚Äî –∫–∞–≤–∞ + –ø—Ä–æ—Ç–µ—ó–Ω–æ–≤–∏–π –∫–æ–∫—Ç–µ–π–ª—å",
    6: "‚Äî 2√ó –∫–∞–≤–∏ + 1√ó –ø—Ä–æ—Ç–µ—ó–Ω–æ–≤–∏–π –∫–æ–∫—Ç–µ–π–ª—å\n(–º–æ–∂–Ω–∞ –æ–±–º—ñ–Ω—è—Ç–∏ –Ω–∞ —ñ–Ω—à—ñ —Ç–æ–≤–∞—Ä–∏ —É —Å—Ö–æ–∂–æ–º—É –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ)"
}

def discounts_text():
    return "\n".join([
        "üí∏ –ó–Ω–∏–∂–∫–∏ –Ω–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∏:",
        "1‚Äì2 –æ–ø–ª–∞—Ç–∏ ‚Üí 20%",
        "3‚Äì4 –æ–ø–ª–∞—Ç–∏ ‚Üí 25%",
        "5‚Äì6 –æ–ø–ª–∞—Ç ‚Üí 30%",
        "7‚Äì8 –æ–ø–ª–∞—Ç ‚Üí 35%",
        "9‚Äì10 –æ–ø–ª–∞—Ç ‚Üí 40%",
        "11+ –æ–ø–ª–∞—Ç ‚Üí 45%",
    ])

def bonuses_text():
    return "\n".join([
        "üéÅ –ë–æ–Ω—É—Å–∏ –∑–∞ —Ä—ñ–≤–Ω—è–º–∏:",
        "2 —Ä—ñ–≤–µ–Ω—å: 1√ó –∫–∞–≤–∞",
        "3 —Ä—ñ–≤–µ–Ω—å: 2√ó –∫–∞–≤–∏",
        "4 —Ä—ñ–≤–µ–Ω—å: 1√ó –ø—Ä–æ—Ç–µ—ó–Ω–æ–≤–∏–π –∫–æ–∫—Ç–µ–π–ª—å",
        "5 —Ä—ñ–≤–µ–Ω—å: –∫–∞–≤–∞ + –ø—Ä–æ—Ç–µ—ó–Ω–æ–≤–∏–π –∫–æ–∫—Ç–µ–π–ª—å",
        "6 —Ä—ñ–≤–µ–Ω—å: 2√ó –∫–∞–≤–∏ + 1√ó –ø—Ä–æ—Ç–µ—ó–Ω–æ–≤–∏–π –∫–æ–∫—Ç–µ–π–ª—å",
        "üîÅ –ú–æ–∂–Ω–∞ –æ–±–º—ñ–Ω—è—Ç–∏ –Ω–∞ —ñ–Ω—à—ñ —Ç–æ–≤–∞—Ä–∏ —É —Å—Ö–æ–∂–æ–º—É –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ."
    ])

# =====================
# WayForPay helpers
# =====================

def hmac_md5(secret: str, parts: list) -> str:
    base = ";".join(str(p) for p in parts)
    return hmac.new(secret.encode("utf-8"), base.encode("utf-8"), hashlib.md5).hexdigest()

def sign_purchase(order_ref, order_date, amount, currency, product_names, product_counts, product_prices):
    parts = [WFP_MERCHANT, WFP_DOMAIN, order_ref, order_date, amount, currency]
    parts += list(product_names)
    parts += [str(x) for x in product_counts]
    parts += [str(x) for x in product_prices]
    return hmac_md5(WFP_SECRET, parts)

def create_payment_link(user_id: int, amount_uah: int):
    """–ü–µ—Ä—à–∞ –æ–ø–ª–∞—Ç–∞ (—Ä—É—á–Ω–∞). –î–∞—î URL —ñ, –ø—ñ—Å–ª—è success, —É callback –ø—Ä–∏–π–¥–µ recToken."""
    if not (WFP_MERCHANT and WFP_SECRET and PUBLIC_URL):
        return {"ok": False, "error": "WayForPay –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ. –î–æ–¥–∞–π WFP_MERCHANT, WFP_SECRET, PUBLIC_URL."}

    order_ref = f"vip_{user_id}_{int(time.time())}"
    order_date = int(time.time())
    currency = "UAH"
    product_names = ["VIP –∫–ª—É–± ‚Äî —â–æ–º—ñ—Å—è—á–Ω–∏–π –≤–Ω–µ—Å–æ–∫"]
    product_counts = [1]
    product_prices = [amount_uah]

    signature = sign_purchase(order_ref, order_date, amount_uah, currency, product_names, product_counts, product_prices)

    form = {
        "merchantAccount": WFP_MERCHANT,
        "merchantAuthType": "SimpleSignature",
        "merchantDomainName": WFP_DOMAIN,
        "merchantSignature": signature,
        "orderReference": order_ref,
        "orderDate": order_date,
        "amount": amount_uah,
        "currency": currency,
        "productName[]": product_names,
        "productCount[]": product_counts,
        "productPrice[]": product_prices,
        "returnUrl": WFP_RETURN_URL,
        "serviceUrl": f"{PUBLIC_URL}/wfp-callback",
        "language": "uk",
        "regularMode": "true"  # –≤–∞–∂–ª–∏–≤–æ: –¥–æ–∑–≤–æ–ª—è—î –∑–±–µ—Ä–µ–≥—Ç–∏ recToken –ø—ñ—Å–ª—è success
    }

    try:
        r = requests.post("https://secure.wayforpay.com/pay?behavior=offline", data=form, timeout=20)
        r.raise_for_status()
        data = r.json()
        if "url" in data:
            return {"ok": True, "url": data["url"], "orderRef": order_ref}
        return {"ok": False, "error": f"–í—ñ–¥–ø–æ–≤—ñ–¥—å WayForPay –±–µ–∑ url: {data}"}
    except Exception as e:
        return {"ok": False, "error": str(e)}

def sign_regular(order_ref, amount, currency, rec_token):
    """–ü—ñ–¥–ø–∏—Å –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∞–Ω–Ω—è. –£ –±—ñ–ª—å—à–æ—Å—Ç—ñ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π WayForPay –≤—ñ–Ω –≤–∫–ª—é—á–∞—î
    merchantAccount;orderReference;amount;currency;recToken (HMAC-MD5).
    –ó–∞ –ø–æ—Ç—Ä–µ–±–∏ –∑–≤—ñ—Ä —É –∫–∞–±—ñ–Ω–µ—Ç—ñ WFP —ñ –ø–æ–ø—Ä–∞–≤ parts.
    """
    parts = [WFP_MERCHANT, order_ref, amount, currency, rec_token]
    return hmac_md5(WFP_SECRET, parts)

def regular_charge(user_id: int, amount_uah: int) -> dict:
    """–°–ø—Ä–æ–±–∞ –∞–≤—Ç–æ—Å–ø–∏—Å–∞–Ω–Ω—è –ø–æ recToken. –ü–æ–≤–µ—Ä—Ç–∞—î dict ok/err. """
    uid = str(user_id)
    u = get_user(user_id)
    rec = u.get("recToken")
    if not rec:
        return {"ok": False, "error": "recToken –≤—ñ–¥—Å—É—Ç–Ω—ñ–π (–ø–µ—Ä—à–∞ –æ–ø–ª–∞—Ç–∞ —â–µ –Ω–µ –¥–∞–ª–∞ —Ç–æ–∫–µ–Ω)."}

    order_ref = f"vip_auto_{uid}_{int(time.time())}"
    currency = "UAH"
    sign = sign_regular(order_ref, amount_uah, currency, rec)

    payload = {
        "transactionType": "REGULAR_PAYMENT",
        "merchantAccount": WFP_MERCHANT,
        "merchantAuthType": "SimpleSignature",
        "merchantSignature": sign,
        "orderReference": order_ref,
        "amount": amount_uah,
        "currency": currency,
        "recToken": rec,
        "productName": ["VIP –∫–ª—É–± ‚Äî –∞–≤—Ç–æ—Å–ø–∏—Å–∞–Ω–Ω—è"],
        "productPrice": [amount_uah],
        "productCount": [1]
    }

    try:
        r = requests.post("https://api.wayforpay.com/api", json=payload, timeout=25)
        r.raise_for_status()
        data = r.json()
        status = data.get("transactionStatus", "")
        if status == "Approved":
            return {"ok": True, "data": data, "orderRef": order_ref}
        return {"ok": False, "error": f"WFP status: {status} / {data}"}
    except Exception as e:
        return {"ok": False, "error": str(e)}

# =====================
# Telegram Bot UI
# =====================

bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")

def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(types.KeyboardButton(f"üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏ {SUBSCRIPTION_AMOUNT} –≥—Ä–Ω (–ø–µ—Ä—à–∏–π –ø–ª–∞—Ç—ñ–∂)"))
    kb.add(types.KeyboardButton("üìä –ú—ñ–π —Ä—ñ–≤–µ–Ω—å"), types.KeyboardButton("üí∏ –ó–Ω–∏–∂–∫–∏"))
    kb.add(types.KeyboardButton("üéÅ –ë–æ–Ω—É—Å–∏"))
    return kb

@bot.message_handler(commands=["start"])
def cmd_start(m: types.Message):
    get_user(m.from_user.id)
    bot.send_message(
        m.chat.id,
        f"–í—ñ—Ç–∞—î–º–æ —É VIP –∫–ª—É–±—ñ üéüÔ∏è\n–©–æ–º—ñ—Å—è—á–Ω–∏–π –≤–Ω–µ—Å–æ–∫: <b>{SUBSCRIPTION_AMOUNT} –≥—Ä–Ω</b>.\n"
        "–ü–µ—Ä—à–∏–π –ø–ª–∞—Ç—ñ–∂ ‚Äî –≤—Ä—É—á–Ω—É, –¥–∞–ª—ñ –±—É–¥–µ –∞–≤—Ç–æ—Å–ø–∏—Å–∞–Ω–Ω—è –ø–æ –∫–∞—Ä—Ç—Ü—ñ (–∑–∞ –∑–≥–æ–¥–æ—é –∫–ª—ñ—î–Ω—Ç–∞).",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "üí∏ –ó–Ω–∏–∂–∫–∏")
def show_discounts(m):
    bot.send_message(m.chat.id, discounts_text())

@bot.message_handler(func=lambda msg: msg.text == "üéÅ –ë–æ–Ω—É—Å–∏")
def show_bonuses(m):
    bot.send_message(m.chat.id, bonuses_text())

@bot.message_handler(func=lambda msg: msg.text == "üìä –ú—ñ–π —Ä—ñ–≤–µ–Ω—å")
def my_level(m):
    u = get_user(m.from_user.id)
    level = u["level"]
    disc = discount_for_level(level)
    last = u["last_payment_at"]
    last_str = datetime.fromtimestamp(last).strftime("%d.%m.%Y %H:%M") if last else "‚Äî"
    rec = "‚úÖ –∑–±–µ—Ä–µ–∂–µ–Ω–æ" if u.get("recToken") else "‚ùå —â–µ –Ω–µ–º–∞—î (–∑‚Äô—è–≤–∏—Ç—å—Å—è –ø—ñ—Å–ª—è 1-–≥–æ —É—Å–ø—ñ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂—É)"
    text = (
        f"üë§ –†—ñ–≤–µ–Ω—å: <b>{level}</b> (–∑–Ω–∏–∂–∫–∞ {disc}%)\n"
        f"–û—Å—Ç–∞–Ω–Ω—è –æ–ø–ª–∞—Ç–∞: {last_str}\n"
        f"recToken: {rec}\n"
        f"–ë–æ–Ω—É—Å–∏:\n{BONUSES_BY_LEVEL.get(level, '')}"
    )
    bot.send_message(m.chat.id, text)

@bot.message_handler(func=lambda msg: msg.text.startswith("üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏"))
def pay_first(m):
    uid = m.from_user.id
    res = create_payment_link(uid, SUBSCRIPTION_AMOUNT)
    if not res["ok"]:
        bot.send_message(m.chat.id, f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É: {res['error']}")
        return

    # –ó–∞–ø–∏—à–µ–º–æ "Pending"
    u = get_user(uid)
    u["payments"].append({
        "orderRef": res["orderRef"],
        "amount": SUBSCRIPTION_AMOUNT,
        "status": "Pending",
        "createdAt": int(time.time())
    })
    save_db()

    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton(f"–û–ø–ª–∞—Ç–∏—Ç–∏ {SUBSCRIPTION_AMOUNT} –≥—Ä–Ω", url=res["url"]))
    bot.send_message(m.chat.id, "–ù–∞—Ç–∏—Å–Ω–∏, —â–æ–± –æ–ø–ª–∞—Ç–∏—Ç–∏:", reply_markup=kb)

# =====================
# Flask: serviceUrl callback –≤—ñ–¥ WayForPay
# =====================

server = Flask(__name__)

def sign_callback_check(payload: dict) -> bool:
    # –í signature –¥–ª—è callback –∑–∞–∑–≤–∏—á–∞–π –≤—Ö–æ–¥–∏—Ç—å:
    # merchantAccount;orderReference;amount;currency;authCode;cardPan;transactionStatus;reasonCode
    try:
        parts = [
            payload.get("merchantAccount",""),
            payload.get("orderReference",""),
            payload.get("amount",""),
            payload.get("currency",""),
            payload.get("authCode",""),
            payload.get("cardPan",""),
            payload.get("transactionStatus",""),
            payload.get("reasonCode",""),
        ]
        expected = hmac_md5(WFP_SECRET, parts)
        return expected == payload.get("merchantSignature")
    except Exception:
        return False

def callback_response(order_ref: str, status: str = "accept"):
    now = int(time.time())
    sig = hmac_md5(WFP_SECRET, [order_ref, status, now])
    return {"orderReference": order_ref, "status": status, "time": now, "signature": sig}

@server.route("/wfp-callback", methods=["POST"])
def wfp_callback():
    # –ü—Ä–∏–π–º–∞—î–º–æ JSON –∞–±–æ form-encoded
    payload = request.get_json(silent=True)
    if not payload:
        payload = request.form.to_dict()
    order_ref = payload.get("orderReference", "unknown")
    tx_status = payload.get("transactionStatus", "")
    # –í–∏—Ç—è–≥—É—î–º–æ tg_id –∑ orderRef vip_<tg>_<ts>
    tg_id = None
    if order_ref.startswith("vip_"):
        try:
            tg_id = int(order_ref.split("_")[1])
        except Exception:
            pass

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å—É (—è–∫—â–æ –ø–æ–º–∏–ª–∫–∞ ‚Äî –≤—Å–µ –æ–¥–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ accept, –∞–ª–µ –Ω–µ –∑–∞—Ä–∞—Ö–æ–≤—É—î–º–æ)
    valid = sign_callback_check(payload)

    if valid and tx_status == "Approved" and tg_id:
        u = get_user(tg_id)
        # –ó–±–µ—Ä–µ–≥—Ç–∏ recToken, —è–∫—â–æ –Ω–∞–¥—ñ–π—à–æ–≤ –≤—ñ–¥ WayForPay –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂—É
        rec_token = payload.get("recToken") or payload.get("recTokenForInstallments")
        if rec_token:
            u["recToken"] = rec_token

        # –û–Ω–æ–≤–∏—Ç–∏ –æ–ø–ª–∞—Ç–∏
        already = any(p["orderRef"] == order_ref and p.get("status") == "Approved" for p in u["payments"])
        if not already:
            # –ú–∞—Ä–∫—É—î–º–æ —è–∫ Approved
            for p in u["payments"]:
                if p["orderRef"] == order_ref:
                    p["status"] = "Approved"
                    break
            else:
                u["payments"].append({"orderRef": order_ref, "amount": payload.get("amount", SUBSCRIPTION_AMOUNT), "status": "Approved", "createdAt": int(time.time())})

            u["consecutive_payments"] = int(u.get("consecutive_payments", 0)) + 1
            u["level"] = level_from_consecutive(u["consecutive_payments"])
            u["last_payment_at"] = int(time.time())
            # –ù–∞—Å—Ç—É–ø–Ω–∞ –¥–∞—Ç–∞ —Å–ø–∏—Å–∞–Ω–Ω—è —á–µ—Ä–µ–∑ 30 –¥–Ω—ñ–≤
            u["next_due_at"] = u["last_payment_at"] + 30*24*3600
            u["failed_autopay_days"] = 0
            save_db()

            try:
                disc = discount_for_level(u["level"])
                bot.send_message(tg_id, f"‚úÖ –û–ø–ª–∞—Ç—É –æ—Ç—Ä–∏–º–∞–Ω–æ! –†—ñ–≤–µ–Ω—å: {u['level']} (–∑–Ω–∏–∂–∫–∞ {disc}%). –ù–∞—Å—Ç—É–ø–Ω–µ —Å–ø–∏—Å–∞–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —á–µ—Ä–µ–∑ 30 –¥–Ω—ñ–≤.")
            except Exception:
                pass

    # –í—ñ–¥–ø–æ–≤—ñ–¥—å WayForPay
    return jsonify(callback_response(order_ref, "accept"))

# =====================
# –ê–≤—Ç–æ—Å–ø–∏—Å–∞–Ω–Ω—è (—â–æ–¥–µ–Ω–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞)
# =====================

def daily_billing_loop():
    while True:
        now = int(time.time())
        changed = False
        for uid, u in list(DB.items()):
            # –Ø–∫—â–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –¥–∞—Ç–∞ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å–ø–∏—Å–∞–Ω–Ω—è —ñ recToken —î
            due = u.get("next_due_at")
            rec = u.get("recToken")
            if not due or not rec:
                continue
            # –Ø–∫—â–æ –Ω–∞—Å—Ç–∞–≤ —á–∞—Å —Å–ø–∏—Å–∞–Ω–Ω—è (–ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–∞–∑ –Ω–∞ –¥–æ–±—É/–≥–æ–¥–∏–Ω—É)
            if now >= due:
                # –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —Å–ø–∏—Å–∞—Ç–∏
                res = regular_charge(int(uid), SUBSCRIPTION_AMOUNT)
                if res.get("ok"):
                    # –£—Å–ø—ñ—Ö: –æ–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–µ–π—Ç
                    u["payments"].append({
                        "orderRef": res.get("orderRef"),
                        "amount": SUBSCRIPTION_AMOUNT,
                        "status": "Approved",
                        "createdAt": int(time.time())
                    })
                    u["consecutive_payments"] = int(u.get("consecutive_payments", 0)) + 1
                    u["level"] = level_from_consecutive(u["consecutive_payments"])
                    u["last_payment_at"] = int(time.time())
                    u["next_due_at"] = u["last_payment_at"] + 30*24*3600
                    u["failed_autopay_days"] = 0
                    try:
                        disc = discount_for_level(u["level"])
                        bot.send_message(int(uid), f"‚úÖ –ê–≤—Ç–æ—Å–ø–∏—Å–∞–Ω–Ω—è {SUBSCRIPTION_AMOUNT} –≥—Ä–Ω —É—Å–ø—ñ—à–Ω–µ. –†—ñ–≤–µ–Ω—å: {u['level']} (–∑–Ω–∏–∂–∫–∞ {disc}%).")
                    except Exception:
                        pass
                    changed = True
                else:
                    # –ù–µ –≤–¥–∞–ª–æ—Å—è —Å–ø–∏—Å–∞—Ç–∏ —Å—å–æ–≥–æ–¥–Ω—ñ
                    u["failed_autopay_days"] = int(u.get("failed_autopay_days", 0)) + 1
                    try:
                        bot.send_message(int(uid), "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Å–ø–∏—Å–∞–Ω–Ω—è —Å—å–æ–≥–æ–¥–Ω—ñ. –ú–∏ —Å–ø—Ä–æ–±—É—î–º–æ –∑–Ω–æ–≤—É –∑–∞–≤—Ç—Ä–∞ (3 —Å–ø—Ä–æ–±–∏ –º–∞–∫—Å–∏–º—É–º).")
                    except Exception:
                        pass
                    # –Ø–∫—â–æ 3 –¥–Ω—ñ –ø–æ—Å–ø—ñ–ª—å –Ω–µ –≤–¥–∞–ª–æ—Å—è ‚Äî —Ä—ñ–≤–µ–Ω—å —Å–∫–∏–¥–∞—î–º–æ
                    if u["failed_autopay_days"] >= 3:
                        u["level"] = 0
                        u["consecutive_payments"] = 0
                        u["next_due_at"] = None
                        try:
                            bot.send_message(int(uid), "‚õî –ü—ñ–¥–ø–∏—Å–∫—É –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–æ >3 –¥–Ω—ñ–≤. –†—ñ–≤–µ–Ω—å VIP —Å–∫–∏–Ω—É—Ç–æ –¥–æ 0. –û—Ñ–æ—Ä–º—ñ—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–µ—Ä—à–∏–π –ø–ª–∞—Ç—ñ–∂, —â–æ–± –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ –∞–≤—Ç–æ—Å–ø–∏—Å–∞–Ω–Ω—è.")
                        except Exception:
                            pass
                        changed = True
            # end if due
        # end for users

        if changed:
            save_db()

        # –°–ø–∏–º–æ –≥–æ–¥–∏–Ω—É (–º–æ–∂–Ω–∞ –∑–±—ñ–ª—å—à–∏—Ç–∏ –¥–æ 6 –≥–æ–¥–∏–Ω)
        time.sleep(3600)

# =====================
# Run (Railway expects a web server)
# =====================

def run_bot():
    bot.infinity_polling(skip_pending=True, timeout=20, long_polling_timeout=20)

if __name__ == "__main__":
    threading.Thread(target=daily_billing_loop, daemon=True).start()
    threading.Thread(target=run_bot, daemon=True).start()
    port = int(os.environ.get("PORT", "8080"))
    server.run(host="0.0.0.0", port=port)
