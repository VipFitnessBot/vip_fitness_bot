import logging
import asyncio
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackContext

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

def get_token():
    try:
        with open("token.txt", "r") as f:
            return f.read().strip()
    except FileNotFoundError:
        raise ValueError("–§–∞–π–ª token.txt –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –°—Ç–≤–æ—Ä–∏ –π–æ–≥–æ —ñ –≤—Å—Ç–∞–≤ —Ç–æ–∫–µ–Ω –≤—Å–µ—Ä–µ–¥–∏–Ω—É.")

TOKEN = get_token()

users = {}

discount_levels = {
    1: 20,
    2: 25,
    3: 30,
    4: 35,
    5: 40,
    6: 45
}

bonus_levels = {
    1: "–ö–∞–≤–∞",
    2: "2 –∫–∞–≤–∏",
    3: "–ü—Ä–æ—Ç–µ—ó–Ω–æ–≤–∏–π –∫–æ–∫—Ç–µ–π–ª—å",
    4: "–ö–∞–≤–∞ + –ø—Ä–æ—Ç–µ—ó–Ω–æ–≤–∏–π –∫–æ–∫—Ç–µ–π–ª—å",
    5: "2 –∫–∞–≤–∏ + –ø—Ä–æ—Ç–µ—ó–Ω–æ–≤–∏–π –∫–æ–∫—Ç–µ–π–ª—å",
    6: "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –ø–∞–∫–µ—Ç –±–æ–Ω—É—Å—ñ–≤"
}

async def start(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if user_id not in users:
        users[user_id] = {"level": 0, "payments": 0}
    keyboard = [["–ú—ñ–π —Ä—ñ–≤–µ–Ω—å", "–ó–Ω–∏–∂–∫–∏"], ["–ë–æ–Ω—É—Å–∏", "–û–ø–ª–∞—Ç–∏—Ç–∏"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–í—ñ—Ç–∞—é —É VIP-–∫–ª—É–±—ñ! üéâ\n–û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=reply_markup
    )

async def my_level(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    level = users.get(user_id, {"level": 0})["level"]
    await update.message.reply_text(f"–¢–≤—ñ–π —Ä—ñ–≤–µ–Ω—å: {level}")

async def discounts(update: Update, context: CallbackContext):
    text = "üìâ –°–∏—Å—Ç–µ–º–∞ –∑–Ω–∏–∂–æ–∫:\n"
    for lvl, disc in discount_levels.items():
        text += f"{lvl}-–π —Ä—ñ–≤–µ–Ω—å ‚Üí {disc}%\n"
    await update.message.reply_text(text)

async def bonuses(update: Update, context: CallbackContext):
    text = "üéÅ –°–∏—Å—Ç–µ–º–∞ –±–æ–Ω—É—Å—ñ–≤:\n"
    for lvl, bonus in bonus_levels.items():
        text += f"{lvl}-–π —Ä—ñ–≤–µ–Ω—å ‚Üí {bonus}\n"
    text += "\n–ë–æ–Ω—É—Å–∏ –º–æ–∂–Ω–∞ –æ–±–º—ñ–Ω—è—Ç–∏ –Ω–∞ —ñ–Ω—à—ñ —Ç–æ–≤–∞—Ä–∏ –≤ –ø–æ–¥—ñ–±–Ω–æ–º—É —Ü—ñ–Ω–æ–≤–æ–º—É –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ."
    await update.message.reply_text(text)

async def pay(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if user_id not in users:
        users[user_id] = {"level": 0, "payments": 0}

    users[user_id]["payments"] += 1
    payments = users[user_id]["payments"]

    if payments >= 6:
        users[user_id]["level"] = 6
    else:
        users[user_id]["level"] = payments

    await update.message.reply_text(
        f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–∏–π–Ω—è—Ç–∞!\n–¢–µ–ø–µ—Ä —Ç–≤—ñ–π —Ä—ñ–≤–µ–Ω—å: {users[user_id]['level']}"
    )
# --- –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ñ—Ç–∞—é —É VIP-–∫–ª—É–±—ñ! üéâ")

# --- –ì–æ–ª–æ–≤–Ω–∏–π –∑–∞–ø—É—Å–∫ ---
def main():
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))

    # ‚ö°Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ run_polling (–≤—ñ–Ω —Å–∞–º –∫–µ—Ä—É—î –ø–æ–¥—ñ—è–º–∏, –±–µ–∑ asyncio.run)
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
