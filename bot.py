import logging
import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from config import BOT_TOKEN

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–ª–æ–≤–Ω–∏–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ {user_id: {"level": int, "last_payment": datetime, "payments": int}}
users = {}

# –ë–æ–Ω—É—Å–∏ –∑–∞ —Ä—ñ–≤–Ω—è–º–∏
BONUSES = {
    2: "–ö–∞–≤–∞",
    3: "2 –∫–∞–≤–∏",
    4: "–ü—Ä–æ—Ç–µ—ó–Ω–æ–≤–∏–π –∫–æ–∫—Ç–µ–π–ª—å",
    5: "–ö–∞–≤–∞ + –ø—Ä–æ—Ç–µ—ó–Ω–æ–≤–∏–π –∫–æ–∫—Ç–µ–π–ª—å",
    6: "2 –∫–∞–≤–∏ + –ø—Ä–æ—Ç–µ—ó–Ω–æ–≤–∏–π –∫–æ–∫—Ç–µ–π–ª—å"
}

# –ó–Ω–∏–∂–∫–∏
DISCOUNTS = {
    1: "20%",
    2: "20%",
    3: "25%",
    4: "25%",
    5: "30%",
    6: "30%",
    7: "35%",
    8: "40%",
    9: "45%"
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in users:
        users[user_id] = {"level": 0, "last_payment": None, "payments": 0}

    keyboard = [
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏ 100 –≥—Ä–Ω (VIP)", callback_data="pay")],
        [InlineKeyboardButton("üéÅ –ú–æ—ó –±–æ–Ω—É—Å–∏", callback_data="bonus")],
        [InlineKeyboardButton("üìâ –ú–æ—ó –∑–Ω–∏–∂–∫–∏", callback_data="discount")],
        [InlineKeyboardButton("üìä –ú—ñ–π —Ä—ñ–≤–µ–Ω—å", callback_data="level")],
        [InlineKeyboardButton("‚ÑπÔ∏è –£—Å—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –∫–ª—É–±—É", callback_data="all_info")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text("–í—ñ—Ç–∞—é —É VIP –∫–ª—É–±—ñ! –û–±–µ—Ä–∏ –æ–ø—Ü—ñ—é:", reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    if user_id not in users:
        users[user_id] = {"level": 0, "last_payment": None, "payments": 0}

    data = query.data
    if data == "pay":
        users[user_id]["payments"] += 1
        users[user_id]["last_payment"] = datetime.datetime.now()
        users[user_id]["level"] = min(users[user_id]["payments"], 9)
        await query.edit_message_text("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ (–∑–∞–≥–ª—É—à–∫–∞). –†—ñ–≤–µ–Ω—å –æ–Ω–æ–≤–ª–µ–Ω–æ!")

    elif data == "bonus":
        level = users[user_id]["level"]
        bonuses = [f"{lvl} —Ä—ñ–≤–µ–Ω—å ‚Üí {BONUSES[lvl]}" for lvl in BONUSES]
        current = BONUSES.get(level, "–©–µ –Ω–µ–º–∞—î –±–æ–Ω—É—Å—ñ–≤")
        await query.edit_message_text(f"üéÅ –¢–≤–æ—ó –±–æ–Ω—É—Å–∏: {current}\n\n–ú–æ–∂–ª–∏–≤—ñ:\n" + "\n".join(bonuses))

    elif data == "discount":
        level = users[user_id]["level"]
        current = DISCOUNTS.get(level, "–ù–µ–º–∞—î –∑–Ω–∏–∂–∫–∏")
        all_discounts = [f"{lvl} —Ä—ñ–≤–µ–Ω—å ‚Üí {DISCOUNTS[lvl]}" for lvl in DISCOUNTS]
        await query.edit_message_text(f"üìâ –¢–≤–æ—è –∑–Ω–∏–∂–∫–∞: {current}\n\n–ú–æ–∂–ª–∏–≤—ñ:\n" + "\n".join(all_discounts))

    elif data == "level":
        level = users[user_id]["level"]
        await query.edit_message_text(f"üìä –¢–≤—ñ–π —Ä—ñ–≤–µ–Ω—å: {level}")

    elif data == "all_info":
        bonuses = "\n".join([f"{lvl} —Ä—ñ–≤–µ–Ω—å ‚Üí {BONUSES[lvl]}" for lvl in BONUSES])
        discounts = "\n".join([f"{lvl} —Ä—ñ–≤–µ–Ω—å ‚Üí {DISCOUNTS[lvl]}" for lvl in DISCOUNTS])
        await query.edit_message_text(f"üéÅ –ë–æ–Ω—É—Å–∏:\n{bonuses}\n\nüìâ –ó–Ω–∏–∂–∫–∏:\n{discounts}")

# –ó–∞–ø—É—Å–∫
def main():
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.run_polling()

if __name__ == "__main__":
    main()
