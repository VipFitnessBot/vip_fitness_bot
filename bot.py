import json
import os
from datetime import datetime, timedelta

import telebot
from telebot import types

from config import BOT_TOKEN

# ===  –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è  ===
bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")

DATA_FILE = "users.json"

# === –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è / –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ===
def load_users():
    if not os.path.exists(DATA_FILE):
        return {}
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return {}

def save_users(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

users = load_users()

# === –ú–∞–ø—ñ–Ω–≥ –æ–ø–ª–∞—Ç -> —Ä—ñ–≤–µ–Ω—å/–∑–Ω–∏–∂–∫–∞ ===
def payments_to_level(payments: int) -> int:
    if payments <= 0:
        return 0
    if payments <= 2:
        return 1
    if payments <= 4:
        return 2
    if payments <= 6:
        return 3
    if payments <= 8:
        return 4
    if payments <= 10:
        return 5
    return 6

DISCOUNTS = {
    0: "0% (–æ–ø–ª–∞—Ç —â–µ –Ω–µ –±—É–ª–æ)",
    1: "20%",
    2: "25%",
    3: "30%",
    4: "35%",
    5: "40%",
    6: "45%",
}

BONUSES = {
    2: "‚òï 1 –∫–∞–≤–∞",
    3: "‚òï‚òï 2 –∫–∞–≤–∏",
    4: "ü•§ 1 –ø—Ä–æ—Ç–µ—ó–Ω–æ–≤–∏–π –∫–æ–∫—Ç–µ–π–ª—å",
    5: "‚òï + ü•§ –∫–∞–≤–∞ + –ø—Ä–æ—Ç–µ—ó–Ω–æ–≤–∏–π –∫–æ–∫—Ç–µ–π–ª—å",
    6: "‚òï‚òï + ü•§ 2 –∫–∞–≤–∏ + –ø—Ä–æ—Ç–µ—ó–Ω–æ–≤–∏–π –∫–æ–∫—Ç–µ–π–ª—å",
}

# === –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ—Å—Ç—Ä–æ—á–∫–∏: —è–∫—â–æ 3 –¥–Ω—ñ –±–µ–∑ –æ–ø–ª–∞—Ç–∏ ‚Äî –Ω–∞ 4-–π –¥–µ–Ω—å —Ä—ñ–≤–µ–Ω—å –ø–∞–¥–∞—î –¥–æ 0 ===
def enforce_expiry(user):
    last = user.get("last_payment")
    if not last:
        return user
    try:
        last_dt = datetime.fromisoformat(last)
    except Exception:
        return user
    if datetime.now() - last_dt > timedelta(days=3):
        user["payments"] = 0
        user["level"] = 0
        user["expired"] = True
    else:
        user["expired"] = False
    return user

# === –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫—â–æ –Ω–µ–º–∞—î ===
def ensure_user(user_id: int):
    uid = str(user_id)
    if uid not in users:
        users[uid] = {
            "payments": 0,
            "level": 0,
            "last_payment": None
        }
        save_users(users)
    users[uid] = enforce_expiry(users[uid])
    save_users(users)
    return users[uid]

# === –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ ===
def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üìä –ú—ñ–π —Ä—ñ–≤–µ–Ω—å", "üéÅ –ú–æ—ó –±–æ–Ω—É—Å–∏")
    kb.row("üí≥ –ú–æ—è –∑–Ω–∏–∂–∫–∞", "üèÜ –í—Å—ñ —Ä—ñ–≤–Ω—ñ")
    kb.row("üí∞ –û–ø–ª–∞—Ç–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É")
    return kb

def pay_inline_kb():
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton(text="üîó –û–ø–ª–∞—Ç–∏—Ç–∏ (WayForPay)", url="https://secure.wayforpay.com/placeholder"))
    kb.add(types.InlineKeyboardButton(text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –æ–ø–ª–∞—Ç—É", callback_data="confirm_payment"))
    return kb

# === /start ===
@bot.message_handler(commands=["start"])
def cmd_start(message):
    user = ensure_user(message.from_user.id)
    bot.send_message(
        message.chat.id,
        "üëã –í—ñ—Ç–∞—î–º–æ —É VIP –∫–ª—É–±—ñ! –û–±–∏—Ä–∞–π –¥—ñ—é –≤ –º–µ–Ω—é –Ω–∏–∂—á–µ.",
        reply_markup=main_menu()
    )

# === –ú—ñ–π —Ä—ñ–≤–µ–Ω—å ===
@bot.message_handler(func=lambda m: m.text == "üìä –ú—ñ–π —Ä—ñ–≤–µ–Ω—å")
def my_level(message):
    user = ensure_user(message.from_user.id)
    level = user.get("level", 0)
    payments = user.get("payments", 0)
    discount = DISCOUNTS.get(level, "0%")
    bonus = BONUSES.get(level, "‚Äî –±–æ–Ω—É—Å—ñ–≤ –Ω–∞ —Ü—å–æ–º—É —Ä—ñ–≤–Ω—ñ –Ω–µ–º–∞—î")
    expired_note = "‚õî –ü—ñ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∞: —Ä—ñ–≤–µ–Ω—å —Å–∫–∏–Ω—É—Ç–æ –¥–æ 0." if user.get("expired") else ""
    bot.send_message(
        message.chat.id,
        f"üìä <b>–í–∞—à —Ä—ñ–≤–µ–Ω—å:</b> {level}\n"
        f"üí∏ <b>–û–ø–ª–∞—Ç:</b> {payments}\n"
        f"üéü <b>–ó–Ω–∏–∂–∫–∞:</b> {discount}\n"
        f"üéÅ <b>–ë–æ–Ω—É—Å–∏:</b> {bonus}\n\n"
        f"{expired_note}".strip()
    )

# === –ú–æ—è –∑–Ω–∏–∂–∫–∞ ===
@bot.message_handler(func=lambda m: m.text == "üí≥ –ú–æ—è –∑–Ω–∏–∂–∫–∞")
def my_discount(message):
    user = ensure_user(message.from_user.id)
    level = user.get("level", 0)
    bot.send_message(message.chat.id, f"üéü –í–∞—à–∞ –ø–æ—Ç–æ—á–Ω–∞ –∑–Ω–∏–∂–∫–∞: <b>{DISCOUNTS.get(level, '0%')}</b>")

# === –ú–æ—ó –±–æ–Ω—É—Å–∏ ===
@bot.message_handler(func=lambda m: m.text == "üéÅ –ú–æ—ó –±–æ–Ω—É—Å–∏")
def my_bonuses(message):
    user = ensure_user(message.from_user.id)
    level = user.get("level", 0)
    bonus = BONUSES.get(level, "‚Äî –±–æ–Ω—É—Å—ñ–≤ –Ω–∞ —Ü—å–æ–º—É —Ä—ñ–≤–Ω—ñ –Ω–µ–º–∞—î")
    bot.send_message(
        message.chat.id,
        f"üéÅ –í–∞—à—ñ –±–æ–Ω—É—Å–∏: {bonus}\n\n"
        "‚ÑπÔ∏è –ë–æ–Ω—É—Å–∏ –º–æ–∂–Ω–∞ –æ–±–º—ñ–Ω—è—Ç–∏ –Ω–∞ —ñ–Ω—à—ñ —Ç–æ–≤–∞—Ä–∏ —É —Å—Ö–æ–∂–æ–º—É —Ü—ñ–Ω–æ–≤–æ–º—É –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ."
    )

# === –í—Å—ñ —Ä—ñ–≤–Ω—ñ (—Ç–∞–±–ª–∏—Ü—è) ===
@bot.message_handler(func=lambda m: m.text == "üèÜ –í—Å—ñ —Ä—ñ–≤–Ω—ñ")
def all_levels(message):
    lines = ["üèÜ <b>–†—ñ–≤–Ω—ñ, –∑–Ω–∏–∂–∫–∏, –±–æ–Ω—É—Å–∏</b>"]
    for lvl in [0,1,2,3,4,5,6]:
        disc = DISCOUNTS.get(lvl, "‚Äî")
        bonus = BONUSES.get(lvl, "‚Äî")
        if lvl == 0:
            lines.append(f"–†—ñ–≤–µ–Ω—å 0: –∑–Ω–∏–∂–∫–∞ {disc}, –±–æ–Ω—É—Å–∏ ‚Äî")
        else:
            lines.append(f"–†—ñ–≤–µ–Ω—å {lvl}: –∑–Ω–∏–∂–∫–∞ {disc}, –±–æ–Ω—É—Å–∏: {bonus}")
    bot.send_message(message.chat.id, "\n".join(lines))

# === –û–ø–ª–∞—Ç–∞ –ø—ñ–¥–ø–∏—Å–∫–∏ (WayForPay –∑–∞–≥–ª—É—à–∫–∞ + –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è) ===
@bot.message_handler(func=lambda m: m.text == "üí∞ –û–ø–ª–∞—Ç–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É")
def pay(message):
    ensure_user(message.from_user.id)
    bot.send_message(
        message.chat.id,
        "üí≥ –û–ø–ª–∞—Ç–∞ –ø—ñ–¥–ø–∏—Å–∫–∏ 100 –≥—Ä–Ω.\n"
        "–ü—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó –æ–ø–ª–∞—Ç–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ ¬´‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –æ–ø–ª–∞—Ç—É¬ª.",
        reply_markup=pay_inline_kb()
    )

# –û–±—Ä–æ–±–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏ (–º–∞–Ω—É–∞–ª—å–Ω–∞ —Å–∏–º—É–ª—è—Ü—ñ—è)
@bot.callback_query_handler(func=lambda c: c.data == "confirm_payment")
def confirm_payment(callback: types.CallbackQuery):
    uid = str(callback.from_user.id)
    user = ensure_user(callback.from_user.id)

    # +1 –ø–ª–∞—Ç—ñ–∂
    user["payments"] = int(user.get("payments", 0)) + 1
    user["last_payment"] = datetime.now().isoformat()
    user["level"] = payments_to_level(user["payments"])
    user["expired"] = False
    users[uid] = user
    save_users(users)

    bot.answer_callback_query(callback.id, "–û–ø–ª–∞—Ç—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!")
    bot.edit_message_text(
        "‚úÖ –û–ø–ª–∞—Ç—É –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ! –î—è–∫—É—î–º–æ üíô\n"
        f"–í–∞—à—ñ –Ω–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:\n"
        f"‚Ä¢ –û–ø–ª–∞—Ç: {user['payments']}\n"
        f"‚Ä¢ –†—ñ–≤–µ–Ω—å: {user['level']}\n"
        f"‚Ä¢ –ó–Ω–∏–∂–∫–∞: {DISCOUNTS[user['level']]}",
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id
    )

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    print("üöÄ VIP Fitness Bot –∑–∞–ø—É—â–µ–Ω–æ")
    bot.infinity_polling()
